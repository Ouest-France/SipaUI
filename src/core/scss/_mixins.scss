/*
    SipaUI
    fonctions et mixin SASS
*/

@mixin hover-active-focus {
    &:hover,
    &:active,
    &:focus {
        @content
    }
}

@mixin clearfix() {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

// transform
@mixin transform($transforms) {
    -ms-transform: $transforms;
    transform: $transforms;
}

// transition
@mixin transition($transition...) {
    -webkit-transition: $transition;
    transition: $transition;
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

//animation
@mixin animation ($delay, $duration, $timing, $iteration, $animation) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-timing-function:  $timing;
    -webkit-animation-iteration-count: $iteration;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-timing-function : $timing;
    -moz-animation-iteration-count: $iteration;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -ms-animation-delay: $delay;
    -ms-animation-duration: $duration;
    -ms-animation-name: $animation;
    -ms-animation-timing-function:  $timing;
    -ms-animation-iteration-count: $iteration;
    -ms-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-timing-function:  $timing;
    animation-iteration-count: $iteration;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}


// transform origin
@mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    -ms-transform-origin: $origin;
    transform-origin: $origin;
}

// appearence
@mixin appearance ($appearance) {
    -moz-appearance: $appearance;
    -webkit-appearance: $appearance;
    -ms-appearance: $appearance;
    appearance: $appearance;
}

// dégradé horizontal
@mixin gradient-horizontal($start-color, $end-color, $start-percent, $end-percent) {
    background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent);
    background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent);
    background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}
// dégradé vertical
@mixin gradient-vertical($start-color, $end-color, $start-percent, $end-percent) {
    background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
    background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
    background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

// arrow
@mixin arrow($direction: top, $size: 10px, $color: #ccc, $center: 50%, $margin: -1px, $pseudo: before){
    position: relative;

    &:#{$pseudo} {
        position: absolute;
        content: "";
        width: 0;
        height: 0;
        border-color: $color;

        @if $direction == "right" {
            top: $center;
            left: 100%;
            margin-left: $margin;
            margin-top: $size * -1;
            border-top: $size solid transparent;
            border-bottom: $size solid transparent;
            border-left: $size solid $color;
            border-left-color: inherit;
        } @else if $direction == "bottom" {
            top: 100%;
            left: $center;
            margin-top: $margin;
            margin-left: $size * -1;
            border-left: $size solid transparent;
            border-right: $size solid transparent;
            border-top: $size solid $color;
        } @else if $direction == "left" {
            top: $center;
            right: 100%;
            margin-right: $margin;
            margin-top: $size * -1;
            border-top: $size solid $color;
            border-bottom: $size solid transparent;
            border-right:$size solid transparent;
        } @else if $direction == "top" {
            bottom: 100%;
            left: $center;
            margin-bottom: $margin;
            margin-left: $size * -1;
            border-left: $size solid transparent;
            border-right: $size solid transparent;
            border-bottom: $size solid $color;
        }
    }
}

// rgba
@mixin rgba-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}

// pour les hide et show selon les breakpoints
@mixin responsive-visibility($parent, $type:null) {
    @if ($type) {
        #{$parent} {
            display: $type !important;
        }
    }
    @else {
        #{$parent} {
            display: block !important;
        }
    }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}


// TRONCATURES ————————————————————————————————————————————————————————————————————————————————————————————————
// troncature 1 ligne
@mixin truncate ($width-truncate) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  width: $width-truncate;
}

// hauteur déroulée avec transition
@mixin transitioned-height ($lineHeight, $lineCount: 1, $easing: cubic-bezier(0.77, 0, 0.175, 1)) {
    @include transition(max-height 0.25s $easing 0s);
    min-height: $lineHeight * $lineCount;
    max-height: $lineHeight * $lineCount;
    overflow: hidden;

    &.ouvert {
        max-height: 200rem;
        &:before,
        &:after {
            opacity: 0;
        }
    }
}

        // troncature multiligne //
        @mixin multi-line-ellipsis($lineHeight: 1.6em, $lineCount: 1, $bgColor: transparent) {
            display            : block;
            -webkit-box-orient : vertical;
            position           : relative;

            line-height        : $lineHeight;
            overflow           : hidden;
            text-overflow      : ellipsis;
            padding            : 0;

            height             : calc(#{$lineHeight} * #{$lineCount});

            @supports (-webkit-line-clamp: 1)  {
                display            : -webkit-box;
                -webkit-line-clamp : $lineCount;
            }
        }

// Permet de s'assurer qu'un texte ne dépasse pas (coupe seche, sans les "..." qui ont besoin d'un texte justifié)
@mixin multi-line-truncate($lineHeight: 1.6em, $lineCount: 1){
    overflow: hidden;
    position: relative;
    line-height: $lineHeight;
    height: $lineHeight * $lineCount;
}

// COLUMN MODEL ————————————————————————————————————————————————————————————————————————————————————————————————
//column
@mixin column-count($column-count) {
    -moz-column-count: $column-count;
    -webkit-column-count: $column-count;
    column-count: $column-count;
}
// column_gap
@mixin column-gap($column-gap) {
    -moz-column-gap: $column-gap;
    -webkit-column-gap: $column-gap;
    column-gap: $column-gap;
}

// FLEXBOX MODEL ————————————————————————————————————————————————————————————————————————————————————————————————
// Flex container ----
@mixin display-flex() {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex-direction($direction) { // row, column, row-reverse, column-reverse
        -ms-flex-direction: $direction;
    -webkit-flex-direction: $direction;
            flex-direction: $direction;
}
@mixin flex-wrap($wrap) { // no-wrap, wrap, wrap-reverse
        -ms-flex-wrap: $wrap;
    -webkit-flex-wrap: $wrap;
            flex-wrap: $wrap;
}
@mixin flex-flow($flow) { // row, column, row-reverse, column-reverse \ no-wrap, wrap, wrap-reverse
        -ms-flex-flow: $flow;
    -webkit-flex-flow: $flow;
            flex-flow: $flow;
}

@mixin justify-content($justify, $justifyOld) { //flex-start, flex-end, center, space-between, space-around, space-evenly
              -ms-flex-pack: $justifyOld; // start, end, center, justify, distribute
        -ms-justify-content: $justify;
    -webkit-justify-content: $justify;
            justify-content: $justify;
}

@mixin align-items($align-items) { //flex-start, flex-end, center, stretch, baseline
        -ms-align-items: $align-items;
    -webkit-align-items: $align-items;
            align-items: $align-items;
}

@mixin align-content($align-content) { //flex-start, flex-end, center, stretch, space-between, space-around
        -ms-align-content: $align-content;
    -webkit-align-content: $align-content;
            align-content: $align-content;
}

// Flex items ----
@mixin order($order) { //
        -ms-order: $order;
    -webkit-order: $order;
            order: $order;
}

@mixin flex($flex) { // 0 = pas de taille, integer (1) = taille pour remplir l’espace
        -ms-flex: $flex; // IE11 a besoin d’une unité pour le flex-basis
    -webkit-flex: $flex;
            flex: $flex;
}

@mixin align-self($align-self) { // flex-start, flex-end, center, baseline, stretch
        -ms-align-self: $align-self;
    -webkit-align-self: $align-self;
            align-self: $align-self;
}

// GRILLE ————————————————————————————————————————————————————————————————————————————————————————————————
@function grid-base-calc($i, $max-col) {
    @return ($i / $max-col) * 100;
}
@function grid-col-base-width($i, $max-col) {
    @return grid-base-calc($i, $max-col) + '%';
}
@function grid-gutter-width($i, $max-col) {
    @return round(20px - (20 * grid-base-calc($i, $max-col) / 100));
}

@mixin grid-col-definition($breakpoint, $max-col) {
    @for $i from 1 through $max-col {
        .su-col-#{$breakpoint}-#{$i} {
            flex: 0 0 calc(#{grid-col-base-width($i, $max-col)} - #{grid-gutter-width($i, $max-col)});
            max-width: calc(#{grid-col-base-width($i, $max-col)} - #{grid-gutter-width($i, $max-col)});
        }
    }
}

@mixin grid-offset-definition($breakpoint, $max-col) {
    @for $i from 1 through $max-col {
        .su-offset-#{$breakpoint}-#{$i} {
            margin-left: calc(#{grid-col-base-width($i, $max-col)} - #{grid-gutter-width($i, $max-col)} + 20px);
        }
    }
}

@mixin grid-filling-definition($breakpoint, $max-col) {
    @for $i from 1 through $max-col {
        .su-filling-#{$breakpoint}-#{$i} {
            margin-right: calc(#{grid-col-base-width($i, $max-col)} - #{grid-gutter-width($i, $max-col)} + 20px);
        }
    }
}

// IMPORT DES FONTES ————————————————————————————————————————————————————————————————————————————————————————————————
@mixin import-fonts() {
    @if $font-import-use-local == null {
        @font-face {
            font-family: $font-import-name;
            src: url('#{$font-import-url}-Regular.woff2') format('woff2'),
                url('#{$font-import-url}-Regular.woff') format('woff');
            font-weight: 400;
            font-style: normal;
            font-display: swap;
        }

        @if $font-import-medium {
            @font-face {
                font-family: $font-import-name;
                src: url('#{$font-import-url}-Medium.woff2') format('woff2'),
                    url('#{$font-import-url}-Medium.woff') format('woff');
                font-weight: 500;
                font-style: normal;
                font-display: swap;
            }
        }

        @if $font-import-bold {
            @font-face {
                font-family: $font-import-name;
                src: url('#{$font-import-url}-Bold.woff2') format('woff2'),
                    url('#{$font-import-url}-Bold.woff') format('woff');
                font-weight: 700;
                font-style: normal;
                font-display: swap;
            }
        }

    } @else {
        @font-face {
            font-family: $font-import-name;
            src: url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Regular.woff2') format('woff2'),
                url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Regular.woff') format('woff');
            font-weight: 400;
            font-style: normal;
            font-display: swap;
        }

        @if $font-import-medium {
            @font-face {
                font-family: $font-import-name;
                src: url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Medium.woff2') format('woff2'),
                    url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Medium.woff') format('woff');
                font-weight: 500;
                font-style: normal;
                font-display: swap;
            }
        }

        @if $font-import-bold {
            @font-face {
                font-family: $font-import-name;
                src: url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Bold.woff2') format('woff2'),
                    url('#{$font-import-directory}/#{$font-import-path}#{$font-import-name}-Bold.woff') format('woff');
                font-weight: 700;
                font-style: normal;
                font-display: swap;
            }
        }
    }
}
